#pragma once

#ifndef XPLOITER_H
#define XPLOITER_H

#include <iostream>
#include <string>
#include <vector>

namespace xploiter
{
	std::string getPadding(int size, int repeat)
	{
		std::string out;
		
		int currentAsciiCharacter = (int)'0';
		
		for(int i = currentAsciiCharacter ; i < size ; i++)
		{
			if(currentAsciiCharacter > 'Z' && currentAsciiCharacter < 'a')
			{
				currentAsciiCharacter = 'a';
			}
			else if(currentAsciiCharacter > '9' && currentAsciiCharacter < 'A')
			{
				currentAsciiCharacter = 'A';
			}
			else if(currentAsciiCharacter > 122)
			{
				currentAsciiCharacter = (int)'0';
			}
			
			for(int j = 0 ; j < repeat ; j++)
			{
				out += (char)currentAsciiCharacter;
			}
			currentAsciiCharacter++;
		}
		return out;
	}
	std::vector<int> getPaddingOffset(std::string padding, char elem, int repeat)
	{
		std::vector<int> offsets;
		for(int i = 0 ; i < padding.length(); i++)
		{
			if(padding[i] == elem)
			{
				offsets.push_back(i + 1);
				i += repeat;
			}
		}
		return offsets;
	}
}

#endif