#include <stdio.h>
#include <string.h>
#ifndef KERNEL_H
#define KERNEL_H

#define USER_PASS "T74rd9Vz"
#define ROOT_PASS "6NPB62x9i2fQHhd"

#define USER_NO_PERM 0 //No permission
#define USER_NORMAL_USER_PERM 1 //Normal user permission
#define USER_ROOT_USER_PERM 2 //Root permission

#define DGB(x) printf("%d | ", x)

int permission = USER_NO_PERM;

struct File
{
	char name[64];
	char content[1024];
	int permission;
}typedef File;

int file_get_string(File* file, char output[])
{
	char current_char;
	current_char = fgetc(file);
	int i = 0;
	if(current_char == '"')
	{
		current_char = 'Z';
		while(current_char != '"')
		{
			current_char = fgetc(file);
			if(current_char == '"')
			{
				break;
			}
			else
			{
				output[i] = current_char;
			}
			i++;
		}
		return 1;
	}
	else
	{
		return 0;
	}
}

int file_load_files(char filename[], File output[])
{
	FILE *file = fopen(filename, "r");
	
	char buffer1[256];
	char buffer2[256];
	char buffer3;
	int noFiles = 0;
	int i = 0;
	int end = 0;
	while(!feof(file))
	{
		file_get_string(file, buffer1);
		if(feof(file))
		{
			break;
		}
		fgetc(file);
		file_get_string(file, buffer2);
		fgetc(file);
		buffer3 = fgetc(file);
		int perm;
		if(buffer3 == '0')
		{
			perm = USER_NO_PERM;
		}
		else if(buffer3 == '1')
		{
			perm = USER_NORMAL_USER_PERM;
		}
		else if(buffer3 == '2')
		{
			perm = USER_ROOT_USER_PERM;
		}
		else
		{
			perm = -1;
		}
		//printf("%s : %s : %d\n", buffer1, buffer2, perm);
		if(output)
		{
			strcpy(output[i].name, buffer1);
			strcpy(output[i].content, buffer2);
			output[i].permission = perm;
		}
		
		
		noFiles++;
		i++;
		if(fgetc(file) == ';')
		{
			continue;	
		}
		else
		{
			//printf("What do you mean ?\n");
		}
	}
	
	fclose(file);
	
	return noFiles;
}

int file_permission_str(char* output, File file)
{
	if(file.permission == USER_NORMAL_USER_PERM)
	{
		strcpy(output, "User");
		return 1;
	}
	else if(file.permission == USER_ROOT_USER_PERM)
	{
		strcpy(output, "Root");
		return 2;
	}
	else if(file.permission == USER_NO_PERM)
	{
		strcpy(output, "NULL-Permission");
		return 0;
	}
	else
	{
		strcpy(output, "Error");
		return -1;
	}
}

int whoami_str(char* output)
{
	if(permission == USER_NORMAL_USER_PERM)
	{
		strcpy(output, "User");
		return 1;
	}
	else if(permission == USER_ROOT_USER_PERM)
	{
		strcpy(output, "Root");
		return 2;
	}
	else if(permission == USER_NO_PERM)
	{
		strcpy(output, "NULL-Permission");
		return 0;
	}
	else
	{
		strcpy(output, "Error");
		return -1;
	}
}

int read_file(File file, char* output)
{
	if(file.permission > permission)
	{
		printf("Acces denied : Can't read file, operation requires an elevation\n");
		return 0;
	}
	else
	{
		strcpy(output, file.content);
		return 1;
	}
}
int write_file(File file, char content[])
{
	if(file.permission > permission)
	{
		printf("Acces denied : Can't read file, requires an elevation");
		return 0;
	}
	else
	{
		strcpy(file.content, content);
		return 1;
	}
}

int cmp_string(char* buf1, char* buf2) //The target string shall first argument
{	
	int size = 0;
	
	if(strlen(buf1) > strlen(buf2))
	{
		size = strlen(buf1);
	}
	else if(strlen(buf1) == strlen(buf2))
	{
		size = strlen(buf1);
	}
	else
	{
		size = strlen(buf2);
	}
	
	for(int i = 0 ; i < size ; i++)
	{
		//std::cout << i << " ; " << " : " << str1[i] << " ; " << str2[i] << std::endl;
		if(buf1[i] == buf2[i])
		{
			continue;
		}
		else
		{
			return 0;
		}
	}
	return 1;	
}


int login_user()
{
	char password[] = USER_PASS;
	char user_pass_input[10];
	
	printf("Enter the user's password : ");
	scanf("%s", &user_pass_input);
	printf(password);
	
	if(cmp_string(user_pass_input, password))
	{
		permission = USER_NORMAL_USER_PERM;
		return 1;
	}
	else
	{
		return 0;
	}
}
int login_root()
{
	char password[] = ROOT_PASS;
	char user_pass_input[64];
	
	printf("Enter the root's password : ");
	scanf("%s", &user_pass_input);
	
	if(cmp_string(user_pass_input, password))
	{
		permission = USER_ROOT_USER_PERM;
		return 1;
	}
	else
	{
		return 0;
	}
}
#endif