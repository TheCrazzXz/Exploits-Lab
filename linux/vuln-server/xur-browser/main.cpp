#include <iostream>
#include <vector>
#include "parser.h"
#ifndef _WIN32
	#include <stdio.h>
	#include <sys/types.h>
	#include <unistd.h>
#endif

#define DEBUG0
#define SHELL_PASSWORD "X0z8g"

void copyStr(std::string& src, std::string& dest)
{
    //std::string target = "XXXXX";
    //char target[] = "XXXXX";

    std::string dst;

    for(int j = 0 ; j < src.length() ; j++)
    {
        std::cout << "Iteration : " << j << " : " << std::endl; 
        if(src[j] != '\x00')
        {
            dst += '\x20';
            std::cout << "\t(Not null) Elem : " << src[j] << "(" << j << ")" << " : " << dst.length() << std::endl;
        }
        dst[j] = src[j];
        /*else
        {
            dst[j] = src[j];
            std::cout << "\t(null) Elem : " << src[j] << "(" << j << ")" << " : " << dst.length() << std::endl;
        }*/
    }
    //std::cout << "Target : "<< target << std::endl;

    dst = dest;
}
void connect_shell(std::string pswd, std::string& src)
{
    //std::string target = "XXXXX";
    std::string password = pswd;

    std::string dst;

    for(int j = 0 ; j < src.length() ; j++)
    {
        //std::cout << "Iteration : " << j << " : " << std::endl; 
        if(src[j] != '\x00')
        {
            dst += '\x20';
            //std::cout << "\t(Not null) Elem : " << src[j] << "(" << j << ")" << " : " << dst.length() << std::endl;
        }
        dst[j] = src[j];
    }
    //std::cout << "Target : "<< password << std::endl;
    //std::cout << "Dst : " << dst << std::endl;
    if(dst == password)
    {
	std::cout << "Opening shell..." << std::endl;
	#ifdef _WIN32
		system("C\\windows\\system32\\cmd.exe");
	#else
		setuid(0); setgid(0); system("/bin/bash");
	#endif
    }
    else
    {
        std::cout << "Acces denied : Password is incorrect !" << std::endl;
    }
}

int main()
{
	std::ofstream file;
	file.open("conf.xur");
	std::string xur_content;
	std::getline(std::cin, xur_content);
	file << xur_content;
	file.close();

    auto tagmap = Parser::Parse("conf.xur");
    std::map<std::string, std::string> input_vars;

    #ifdef DEBUG1
        for (auto& it : tagmap)
        {
            std::cout << it.first.first // string (key)
                    << " ("
                    << it.first.second
                    << ")"
                    << " : "
                    << it.second // string's value 
                    << std::endl;
        }
    #endif
    for (auto& it : tagmap)
    {
        if(it.first.first == "")
        {

        }
        else if(it.first.first == "title")
        {
            std::cout << "[" << it.second << "]" << std::endl;
        }
        else if(it.first.first == "p")
        {
            std::cout << it.second << std::endl;
        }
        else if(it.first.first == "text")
        {
            std::cout << it.second;
        }
        else if(it.first.first == "input")
        {
            std::cout << "[";
            std::string input_var;
            std::cin >> input_var;
            input_vars[it.second] = input_var;
            std::cout << "]\n";
        }
        else if(it.first.first == "padding")
        {
            auto args = splitstr(it.second, ",");
            for(int i = 0 ; i < std::atoi(args[0].c_str()) ; i++)
            {
                std::cout << args[1];
            }
            std::cout << std::endl;
        }
        else if(it.first.first == "shape")
        {
            auto args = splitstr(it.second, ",");
            int size = std::atoi(args[2].c_str());
            if(args[1] == "rect_triangle")
            {
                int noChars = 0;
                if(size < 0)
                {
                    noChars = size; //noChars = -5
                    for(int i = 0 ; noChars < 0 ; i++)
                    {
                        for(int j = 0 ; j > noChars ; j--)
                        {
                            std::cout << args[0];
                        }
                        if(noChars != 0)
                        {
                            std::cout << std::endl;
                        }
                        
                        noChars++;
                    }
                }
                else
                {
                    for(int i = 0 ; i < size; i++)
                    {
                        for(int j = 0 ; j < noChars ; j++)
                        {
                            std::cout << args[0];
                        }
                        if(i < size - 1)
                        {
                            std::cout << std::endl;
                        }
                        noChars++;
                    }
                }
                
            }
            else if(args[1] == "rect")
            {
                for(int i = 0 ; i < size; i++)
                {
                    for(int j = 0 ; j < std::atoi(args[3].c_str()) ; j++)
                    {
                        std::cout << args[0];
                    }
                    if(i < size - 1)
                    {
                        std::cout << std::endl;
                    }
                }
            }
        }
        else if(it.first.first == "shellconnect")
        {
            auto args = splitstr(it.second, ",");
            //std::cout << args[0].length() << std::endl;
            connect_shell(SHELL_PASSWORD, args[0]);
        }
    }
    #ifdef DEBUG1
    for (std::map<std::string, std::string>::iterator it = input_vars.begin(); it != input_vars.end(); it++)
    {
        std::cout << it->first    // string (key)
                << " : "
                << it->second   // string's value 
                << std::endl;
    }
    #endif
}
