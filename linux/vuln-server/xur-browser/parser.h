#include <string>
#include <fstream>
#include <map>
#include <vector>

std::vector<std::string> splitstr(std::string str, std::string delim)
{
    std::vector<std::string> tokens;
    size_t prev = 0, pos = 0;
    do
    {
        pos = str.find(delim, prev);
        if (pos == std::string::npos) pos = str.length();
        std::string token = str.substr(prev, pos-prev);
        if (!token.empty()) tokens.push_back(token);
        prev = pos + delim.length();
    }
    while (pos < str.length() && prev < str.length());
    return tokens;
}

namespace Debug
{
    template<typename T>
    void printArray(T array[], int size)
    {
        std::cout << "<Array>" << std::endl;
        for(int i = 0 ; i < size ; i++)
        {
            std::cout << "Elem : " << i << " : " << array[i] << std::endl;
        }   
        std::cout << "</Array>" << std::endl; 
    }
    void printString(std::string array)
    {
        std::cout << "<String>" << std::endl;
        for(int i = 0 ; i < array.length() ; i++)
        {
            std::cout << "Elem : " << i << " : " << std::hex << (int)array[i] << std::endl;
        }   
        std::cout << "</String>" << std::endl; 
    }
}

namespace Parser
{
    std::string getString(std::ifstream& file, char delimiter = '"')
    {
        std::string out;
        char current_char;
        file.get(current_char);
        int i = 0;
        if(current_char == delimiter)
        {
            current_char = '*';
            while(current_char != delimiter)
            {
                file.get(current_char);
                if(current_char == delimiter)
                {
                    break;
                }
                else if(current_char == '\\')
                {
                    char temp_char;
                    file.get(temp_char);
                    if(temp_char == 'n')
                    {
                        out += "\n";
                    }
                }
                else
                {
                    out += current_char;
                }
                i++;
            }
        }
        return out;
    }
    std::string getEndString(std::ifstream& file, char delimiter = '"')
    {
        std::string out;
        char current_char;
        int i = 0;
        current_char = '*';
        while(current_char != delimiter)
        {
            file.get(current_char);
            if(current_char == delimiter)
            {
                break;
            }
            else if(current_char == '\\')
            {
                char temp_char;
                file.get(temp_char);
                if(temp_char == 'n')
                {
                    out += "\n";
                }
            }
            else
            {
                out += current_char;
            }
            i++;
        }
        return out;
    }
    

    std::map<std::pair<std::string, int>, std::string> Parse(std::string filename)
    {
        int currentId = 0;
        std::map<std::pair<std::string, int>, std::string> out;
        std::ifstream file(filename);
        while(!file.eof())
        {
            std::string tag;
            bool isAnEndTag = false;
            char c;
            file.get(c);
            if(c == '<') //Balise start
            {
                std::string value;
                while(c != '>')
                {
                    file.get(c);

                    if(c == '/') //Balise end
                    {
                        isAnEndTag = true;
                        c = '>';
                        break;
                    }

                    if(c != '>')
                    {
                        tag += c;
                    }
                }
                if(!isAnEndTag)
                {
                    //value = getString(file);
                    /*
                    if(c_save == '"')
                    {
                        std::cout << "yes" << std::endl;
                        value = getEndString(file, '"');
                    }
                    else
                    {*/
                    value = getEndString(file, '<');
                    //}
                    out[std::make_pair(tag, currentId)] = value;
                    currentId++;
                }
            }
        }
        return out;
    }

}


